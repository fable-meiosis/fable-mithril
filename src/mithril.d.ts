/** Declaration file generated by dts-gen */

export = mithriljs;

declare function mithriljs(...args: any[]): any;

declare namespace mithriljs {
  class PromisePolyfill {
    constructor(p0: any);

    // Native method; no parameter or return type inference available
    catch(p0: any): any;

    // Native method; no parameter or return type inference available
    finally(p0: any): any;

    // Native method; no parameter or return type inference available
    then(p0: any, p1: any): any;

    static all(p0: any): any;

    static race(p0: any): any;

    static reject(p0: any): any;

    static resolve(p0: any): any;
  }

  const prototype: {};

  const version: string;

  function buildQueryString(object: any): any;

  function fragment(...args: any[]): any;

  function jsonp(url: any, args: any, ...args2: any[]): any;

  function m(selector: any, ...args: any[]): any;

  function mount(root: any, component: any): void;

  function parseQueryString(string: any): any;

  function redraw(): void;

  function render(dom: any, vnodes: any): void;

  function request(url: any, args: any, ...args2: any[]): any;

  function route(root: any, defaultRoute: any, routes: any): void;

  function trust(html: any): any;

  function vnode(
    tag: any,
    key: any,
    attrs0: any,
    children0: any,
    text: any,
    dom: any
  ): any;

  namespace PromisePolyfill {
    namespace proto {
      function then(p0: any, p1: any): any;
    }
  }

  namespace buildQueryString {
    const prototype: {};
  }

  namespace fragment {
    const prototype: {};
  }

  namespace jsonp {
    const prototype: {};
  }

  namespace m {
    const prototype: {};

    function fragment(...args: any[]): any;

    function trust(html: any): any;

    namespace fragment {
      const prototype: {};
    }

    namespace trust {
      const prototype: {};
    }
  }

  namespace mount {
    const prototype: {};
  }

  namespace parseQueryString {
    const prototype: {};
  }

  namespace redraw {
    const prototype: {};

    function sync(): void;

    namespace sync {
      const prototype: {};
    }
  }

  namespace render {
    const prototype: {};
  }

  namespace request {
    const prototype: {};
  }

  namespace route {
    const prototype: {};

    function get(): any;

    function link(args0: any): any;

    function param(key0: any): any;

    function prefix(prefix: any): void;

    function set(path: any, data0: any, options: any): void;

    namespace get {
      const prototype: {};
    }

    namespace link {
      const prototype: {};
    }

    namespace param {
      const prototype: {};
    }

    namespace prefix {
      const prototype: {};
    }

    namespace set {
      const prototype: {};
    }
  }

  namespace trust {
    const prototype: {};
  }

  namespace vnode {
    const prototype: {};

    function normalize(node: any): any;

    function normalizeChildren(input: any): any;

    namespace normalize {
      const prototype: {};
    }

    namespace normalizeChildren {
      const prototype: {};
    }
  }
}
